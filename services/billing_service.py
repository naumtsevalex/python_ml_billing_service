import sys
from datetime import datetime
from db.database import Database
from models.user import User
from models.balance import Balance
from models.task import Task

class BillingService:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ"""
    
    def __init__(self):
        self.db = Database()
    
    async def check_user_balance(self, user_id: int) -> tuple[bool, str, float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            tuple: (–º–æ–∂–Ω–æ_–≤—ã–ø–æ–ª–Ω—è—Ç—å_–æ–ø–µ—Ä–∞—Ü–∏—é, —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–∫—É—â–∏–π_–±–∞–ª–∞–Ω—Å)
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = await self.db.get_balance_object(user_id)
        
        if not balance:
            return False, "–û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", 0
        
        # –ü–æ —É—Å–ª–æ–≤–∏—é, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å > 0, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if balance.balance > 0:
            return True, "–ë–∞–ª–∞–Ω—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.", balance.balance
        else:
            return False, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.", balance.balance
    
    async def get_balance_info(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ
        """
        balance = await self.db.get_balance_object(user_id)
        
        if not balance:
            return "–û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        last_updated = balance.updated_at.strftime("%Y-%m-%d %H:%M:%S")
        return f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\nüìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}"
    
    async def _update_balance(self, user_id: int, amount: float, reason: str = None) -> Balance:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è - —Å–ø–∏—Å–∞–Ω–∏–µ)
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            
        Returns:
            tuple: (—É—Å–ø–µ—à–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        old_balance = await self.db.get_balance_object(user_id)
        if not old_balance:
            return False, "–û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await self.db.update_balance(user_id, amount)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await self.db.log(
            user_id=user_id,
            action="BALANCE_UPDATE",
            details=f"Amount: {amount}, Reason: {reason}, Previous balance: {old_balance.balance}"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await self.db.get_balance_object(user_id)
        
        return new_balance
                
    async def charge_for_task(self, task_id: str, reason: str = None) -> tuple[Task, Balance]:
        """
        –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            reason: –ü—Ä–∏—á–∏–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
            
        Returns:
            tuple: (—É—Å–ø–µ—à–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
        task = await self.db.get_task(task_id)
        if not task:
            return False, "–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –∑–∞–¥–∞—á–∏
        user_id = task.user_id
        cost = task.cost
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not reason:
            reason = f"–û–ø–ª–∞—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id}"
        
        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
        return task, await self._update_balance(user_id, -cost, reason)
    
    def str_report_balance(self, balance: Balance) -> tuple[bool, str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if balance.balance <= 0:
            return False, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /balance"
        else:
            return True, f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤."