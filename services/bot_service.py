import os
import json
import uuid
import sys
import aio_pika
from aiogram import Bot
from aiogram.types import BufferedInputFile
from db.database import Database
from models.task import Task, TaskStatusEnum
from models.task_types import TaskTypeEnum, RabbitMQQueueEnum
from utils.file_utils import FileManager
from services.client_rabbitmq_service import ClientRabbitMQService, log_debug
import asyncio

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
sys.stdout.reconfigure(line_buffering=True)

class BotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.file_manager = FileManager()
        self.rabbitmq_service = ClientRabbitMQService()

    async def send_result_to_user(self, user_id: int, result: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        log_debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if result["status"] != "success":
            await self.bot.send_message(user_id, result["message"])
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        task_id = result["task_id"]
        task = await self.db.get_task(task_id)
        
        if not task:
            log_debug(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await self.bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        if task.status != TaskStatusEnum.COMPLETED:
            log_debug(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task.status}")
            await self.bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°—Ç–∞—Ç—É—Å: {task.status}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cost = task.cost
        log_debug(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ {task_id}: {cost}")
            
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        task_type = task.type
        
        if task_type == TaskTypeEnum.TEXT:
            # –≠—Ç–æ –±—ã–ª TTS –∑–∞–ø—Ä–æ—Å (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ)
            result_file = task.result
            log_debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–∑ {result_file}")
            audio_content = await self.file_manager.get_audio(result_file)
            
            # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±–∞–π—Ç–æ–≤
            filename = os.path.basename(result_file)
            voice_file = BufferedInputFile(audio_content, filename=filename)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            log_debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await self.bot.send_voice(user_id, voice_file)
            await self.bot.send_message(user_id, "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ä–µ—á—å")
            
        elif task_type == TaskTypeEnum.VOICE:
            # –≠—Ç–æ –±—ã–ª STT –∑–∞–ø—Ä–æ—Å (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç)
            text_result = task.result
            log_debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await self.bot.send_message(user_id, text_result)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        await self.bot.send_message(user_id, f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤")