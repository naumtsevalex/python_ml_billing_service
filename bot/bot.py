import os
import logging
import asyncio
import sys
from typing import Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

from db.database import Database
from services.message_service import MessageService
from models.user import SYSTEM_USER_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()
db = Database()
message_service = MessageService(bot)

@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> Any:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"User {message.from_user.id} started bot")
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        f"–Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        f"–¢–≤–æ–π ID: <code>{message.from_user.id}</code>"
    )
    

# @dp.message()
# async def echo_handler(message: types.Message):
#     logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
#     await message.answer(f"–≠—Ö–æ: {message.text}")


@dp.message(F.voice)
async def voice_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"Processing voice message from user {message.from_user.id}")
    await db.log(message.from_user.id, "handle_voice", f"{message=}")
    
    result = await message_service.process_message(
        user_id=message.from_user.id,
        message_id=message.message_id,
        voice_file_id=message.voice.file_id
    )
    await message_service.send_result_to_user(message.from_user.id, result)

@dp.message(F.text)
async def text_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"Processing text message from user {message.from_user.id}: {message.text}")
    await db.log(message.from_user.id, "handle_text", "[text_handler]")
    
    result = await message_service.process_message(
        user_id=message.from_user.id,
        message_id=message.message_id,
        text=message.text
    )
    await message_service.send_result_to_user(message.from_user.id, result)
    

async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logger.info("Starting bot...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –≤ –±–∞–∑–µ
    # await db.log(SYSTEM_USER_ID, "BOT_STARTED", "Bot started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —ç—Ö–æ-–±–æ—Ç–µ)
    logger.info("Starting polling...")
    await dp.start_polling(bot)
    

if __name__ == "__main__":
    asyncio.run(main())
    