import os
import logging
import asyncio
import sys
from typing import Any, Optional
from datetime import datetime
import uuid

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommand, BotCommandScopeDefault

from db.database import Database
from services.bot_service import BotService
from services.client_rabbitmq_service import ClientRabbitMQService
from services.billing_service import BillingService

from models.user import SYSTEM_USER_ID, UserRole, User
from models.balance import Balance
from models.task import Task

from middleware import UserRegistrationMiddleware, BalanceMiddleware
from routers.joke_router import joke_router, setup_joke_router
from routers.balance_router import balance_router, setup_balance_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()
db = Database()
client_rabbitmq_service = ClientRabbitMQService()
bot_service = BotService(bot)
billing_service = BillingService()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
main_router = Router()
message_router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
main_router.message.middleware(UserRegistrationMiddleware(db))
message_router.message.middleware(UserRegistrationMiddleware(db))
joke_router.message.middleware(UserRegistrationMiddleware(db))
balance_router.message.middleware(UserRegistrationMiddleware(db))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
# balance_router.callback_query.middleware(BalanceMiddleware(db))
balance_router.callback_query.middleware(UserRegistrationMiddleware(db))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
setup_joke_router(
    db_instance=db,
    client_rabbitmq_service_instance=client_rabbitmq_service,
    bot_service_instance=bot_service,
    billing_service_instance=billing_service
)

setup_balance_router(billing_service_instance=billing_service)

@main_router.message(CommandStart())
async def command_start_handler(message: types.Message) -> Any:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"User {message.from_user.id} started bot")
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        f"üé≠ /joke - —Ä–∞—Å—Å–∫–∞–∂—É —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n"
        f"üéôÔ∏è /joke_voice - —Ä–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç –≥–æ–ª–æ—Å–æ–º\n\n"
        f"üí∞ /balance - –ø–æ–∫–∞–∂—É —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        f"‚ùì /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        f"–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /joke, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç! üòä"
    )

@main_router.message(Command("help"))
async def help_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ
    """
    logger.info(f"Help command from user {message.from_user.id}")
    
    help_text = (
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–∫—É!</b>\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üöÄ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π\n"
        "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üé≠ <b>–ê–Ω–µ–∫–¥–æ—Ç—ã:</b>\n"
        "   /joke - –†–∞—Å—Å–∫–∞–∂—É —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n"
        "   /joke_voice - –†–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç –≥–æ–ª–æ—Å–æ–º\n\n"
        "üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
        "   /balance - –ü–æ–∫–∞–∂—É —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /joke, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç!\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ø–∏—à–∏ –º–Ω–µ! üòä"
    )
    
    await message.answer(help_text, parse_mode="HTML")

async def set_bot_commands() -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram"""
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="joke", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç"),
        BotCommand(command="joke_voice", description="–ü–æ–ª—É—á–∏—Ç—å –æ–∑–≤—É—á–µ–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç"),
    ]
    await bot.set_my_commands(commands)

async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logger.info("Starting bot...")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await db.ensure_system_user_exists()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –≤ –±–∞–∑–µ
    await db.log(SYSTEM_USER_ID, "BOT_STARTED", "Bot started")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(main_router)
    dp.include_router(message_router)
    dp.include_router(joke_router)
    dp.include_router(balance_router)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram)
    await set_bot_commands()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã
    admins = await db.get_users_by_role(UserRole.ADMIN)
    logger.info(f"[main] {admins=}")

    async def notify_admin(admin):
        await bot.send_message(
            admin.telegram_id,
            "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
            f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    await asyncio.gather(*(notify_admin(admin) for admin in admins))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    logger.info("Starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
    