import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from models.user import User, UserRole
from models.balance import Balance
from services.billing_service import BillingService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
balance_router = Router()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
billing_service: BillingService = None

def setup_balance_router(billing_service_instance: BillingService):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    global billing_service
    billing_service = billing_service_instance

def get_balance_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    keyboard = []
    keyboard.append([
        InlineKeyboardButton(
            text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 5 —Ç–æ–∫–µ–Ω–æ–≤",
            callback_data="topup_balance"
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@balance_router.message(Command("balance"))
async def balance_command(message: types.Message, user: User, balance: Balance) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    logger.info(f"Balance command from user {user.telegram_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == UserRole.BANNED:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
    last_updated = balance.updated_at.strftime("%Y-%m-%d %H:%M:%S")
    keyboard = get_balance_keyboard()
    
    await message.answer(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        f"üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}",
        reply_markup=keyboard
    )

@balance_router.callback_query(F.data == "topup_balance")
async def topup_balance_callback(callback: types.CallbackQuery, user: User, balance: Balance) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    logger.info(f"Topup balance callback from user {user.telegram_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == UserRole.BANNED:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    # if balance.balance >= 20:
    #     await callback.answer("–í–∞—à –±–∞–ª–∞–Ω—Å —É–∂–µ –±–æ–ª—å—à–µ 10 —Ç–æ–∫–µ–Ω–æ–≤!", show_alert=True)
    #     return
    
    # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ 5 —Ç–æ–∫–µ–Ω–æ–≤
    new_balance = await billing_service._update_balance(user_id=user.telegram_id, amount=5)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    last_updated = balance.updated_at.strftime("%Y-%m-%d %H:%M:%S")
    keyboard = get_balance_keyboard()
    
    await callback.message.edit_text(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        f"üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}",
        reply_markup=keyboard
    )
    
    await callback.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 5 —Ç–æ–∫–µ–Ω–æ–≤!", show_alert=True) 